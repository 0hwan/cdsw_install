# Director 2.3 Config file
# Creates a small cluster including a Cloudera Data Science Workbench gateway node
#
#
# Copyright (c) 2016 Cloudera, Inc. All rights reserved.
#

#
# Simple AWS Cloudera Director configuration file with automatic role assignments
# that works as expected if you use a single instance type for all cluster nodes
#

#
# Cluster name
#
name: cdsw-test

#
# Cloud provider configuration (credentials, region or zone and optional default image)
#

ssh {

    username: ${SSH_USERNAME}
    privateKey: ${SSH_PRIVATEKEY}
}


#
# Configuration for Cloudera Manager. Cloudera Director can use an existing instance
# or bootstrap everything from scratch for a new cluster
#

cloudera-manager {

    instance: ${instances.master} {
    instanceNamePrefix: cm-${name}
        tags {
            application: "Cloudera Manager 5"
        }
    
   }
    krbAdminUsername: ${?krbAdminUsername}
    krbAdminPassword: ${?krbAdminPassword}

   configs {
        # CLOUDERA_MANAGER corresponds to the Cloudera Manager Server configuration options

   	 CLOUDERA_MANAGER {
	    enable_api_debug: false
            custom_banner_html: "Managed by Cloudera Director"
            MANAGES_PARCELS: true
	    enable_faster_bootstrap: true
            KDC_TYPE: ${?KDC_TYPE}
	    AD_KDC_DOMAIN: ${?AD_KDC_DOMAIN}
	    KDC_HOST: ${?KDC_HOST_IP} # Using IP because of DSE-1796
            SECURITY_REALM: ${?SECURITY_REALM}
            KRB_MANAGE_KRB5_CONF: ${?KRB_MANAGE_KRB5_CONF}
	    # Note use of aes256 - need to ensure ALL cluster members have the necessary JCE policy files.
	    # If you find that you can get a ticket but not use it then this is likely the problem!
            KRB_ENC_TYPES: ${?KRB_ENC_TYPES}
   	}
    }

    csds: [
        "http://archive.cloudera.com/spark2/csd/SPARK2_ON_YARN-2.1.0.cloudera1.jar"
    ]

    #
    # Automatically activate 60-Day Cloudera Enterprise Trial
    #
    enableEnterpriseTrial: true

    repository: "http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/5.11/"
    repositoryKeyUrl: "http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/RPM-GPG-KEY-cloudera"
}

#
# Cluster description
#

cluster {

    products {
      CDH: 5.11 # includes Hive and Spark
      SPARK2: 2
      Anaconda: 4.2
    }


    parcelRepositories:
    ["http://archive.cloudera.com/cdh5/parcels/5.11/", 
    "https://archive.cloudera.com/spark2/parcels/2/",
    "https://repo.continuum.io/pkgs/misc/parcels/"
    ]

    services: [HDFS, YARN, SPARK2_ON_YARN, HIVE, OOZIE, IMPALA]

    masters {
      count: 1
      instance: ${instances.master}

      roles {
        HDFS: [NAMENODE, SECONDARYNAMENODE]
        YARN: [RESOURCEMANAGER, JOBHISTORY]
 	SPARK2_ON_YARN: [SPARK2_YARN_HISTORY_SERVER]
        HIVE: [HIVESERVER2, HIVEMETASTORE]
        OOZIE: [OOZIE_SERVER]
	IMPALA: [CATALOGSERVER, STATESTORE]
      }
# Implement this manually until the root problem is fixed in Director
#      configs {YARN {RESOURCEMANAGER { "yarn.scheduler.maximum-allocation-mb": 2048 }	  }}
    }

    workers {
      count: 3

      instance: ${instances.worker}

      roles {
        HDFS: [DATANODE]
	IMPALA: [IMPALAD]
        YARN: [NODEMANAGER]
      }
#      configs {YARN { NODEMANAGER { "yarn.nodemanager.resource.memory-mb": 2048 } }}
    }
    gateways {
      count: 1

      instance: ${instances.cdsw} {
      	bootstrapScriptsPaths: ${instances.cdsw.bootstrapScriptsPaths} ["scripts/bootstrap-cdsw.sh"]
}

      roles {
        HDFS: [GATEWAY]
	YARN: [GATEWAY]
	SPARK2_ON_YARN: [GATEWAY]
      }
      configs {
            SPARK2_ON_YARN {
                GATEWAY {
                    "spark2-conf/spark-env.sh_client_config_safety_valve": """if [ -z ${PYSPARK_PYTHON} ]; then export PYSPARK_PYTHON=/opt/cloudera/parcels/Anaconda/bin/python spark-submit pyspark_script.py; fi"""
                }
            }
        }
    }
    instancePostCreateScriptsPaths:  ["scripts/cdsw_postcreate.sh"]
}

common-instance-properties.bootstrapScriptsPaths: ["scripts/ntpd.sh", "scripts/kerberos_client.sh", "scripts/jdk_security.sh"]
